image:
  repository: drone/vault
  tag: 1.2.0
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.

## If you need to pull images from a private Docker image repository, pass in the name
## of a Kubernetes Secret that contains the needed secret. For more details, see:
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []
# - name: "image-pull-secret"

## For small or experimental deployments of the Kubernetes runner, 1 replica will suffice.
## For production cases, 2-3 are recommended. This does not grant additional parallelism,
## but does ensure that upgrades, config changes, and disruptions are handled more gracefully.
replicaCount: 1

nameOverride: ""
fullnameOverride: ""

## This chart always creates a unique serviceAccount to add a RoleBinding to the
## system:auth-delegator ClusterRole. The kubernetes vault auth method needs this to access
## the TokenReview API: https://www.vaultproject.io/docs/auth/kubernetes#configuring-kubernetes
serviceAccount:
  # The name is generated using the fullname template
  # Annotations to add to the service account
  annotations: {}
  # Fallback image pull secret.
  # If a pod does not have pull secrets, k8s will use the service account's pull secrets.
  # See: https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#serviceaccount-admission-controller
  # pullSecret: "your-pull-secret"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3000

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

## If you'd like to provide your own Kubernetes Secret object instead of passing your values
## in un-encrypted, pass in the name of a created + populated Secret in the same Namespace
## as the pod. All secrets within this configmap will be mounted as environment variables,
## with each key/value mapping to a corresponding environment variable on the pod.
##
extraSecretNamesForEnvFrom: []
# - my-drone-secrets

## The keys within the "env" map are mounted as environment variables on the secrets extension pod.
##
env: {}
  ## REQUIRED: Shared secret value for comms between the Kubernetes runner and this secrets plugin.
  ## Must match the value set in the runner's env.DRONE_SECRET_PLUGIN_TOKEN.
  ## Ref: https://kube-runner.docs.drone.io/installation/reference/drone-secret-plugin-token/
  ## This is commented out in order to leave you the ability to set the
  ## key via a separately provisioned secret (see existingSecretName above).
  ##
  # DRONE_SECRET:
  ##
  ##
  ## Vault related parameter
  ## For more information about Vault extension parameter, you can take a look here:
  ## https://github.com/drone/drone-vault
  ## https://www.vaultproject.io/docs/commands#environment-variables
  ##
  # VAULT_ADDR: vault-example.local
  ##
  ## Examples of various auth types (use extraSecretNamesForEnvFrom above for these):
  ## (example values from https://learn.hashicorp.com/tutorials/vault/getting-started-apis)
  ##
  # VAULT_AUTH_TYPE: kubernetes
  # VAULT_AUTH_MOUNT_POINT: kubernetes
  # VAULT_KUBERNETES_ROLE: drone
  ##
  # VAULT_AUTH_TYPE: approle
  # VAULT_APPROLE_ID: 3c301960-8a02-d776-f025-c3443d513a18
  # VAULT_APPROLE_SECRET: 22d1e0d6-a70b-f91f-f918-a0ee8902666b
  ##
  # VAULT_AUTH_TYPE: token
  # VAULT_TOKEN: s.Ga5jyNq6kNfRMVQk2LY1j9iu
